import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.client.RestTemplate;

import java.lang.reflect.Method;
import java.security.KeyStore;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class YourClassTest {

    @Mock
    private SecureCredential secureCredential;

    private YourClass yourClass;
    private Method getRestTemplateMethod;

    @BeforeEach
    void setUp() throws NoSuchMethodException {
        yourClass = new YourClass(secureCredential);
        yourClass.setKeyStorePath("path/to/keystore.jks");

        // Use reflection to make the private method accessible
        getRestTemplateMethod = YourClass.class.getDeclaredMethod("getRestTemplate");
        getRestTemplateMethod.setAccessible(true);
    }

    @Test
    void getRestTemplate_withValidKeyStore_returnsRestTemplate() throws Exception {
        // Arrange
        when(secureCredential.getKeyStorePassword()).thenReturn("password");
        
        // Mock KeyStore
        KeyStore mockKeyStore = mock(KeyStore.class);
        try (MockedStatic<KeyStore> mockedKeyStore = mockStatic(KeyStore.class)) {
            mockedKeyStore.when(() -> KeyStore.getInstance("JKS")).thenReturn(mockKeyStore);

            // Act
            RestTemplate result = (RestTemplate) getRestTemplateMethod.invoke(yourClass);

            // Assert
            assertNotNull(result);
            // Add more specific assertions based on your RestTemplate configuration
        }
    }

    @Test
    void getRestTemplate_withInvalidKeyStore_returnsRestTemplateWithoutSSL() throws Exception {
        // Arrange
        when(secureCredential.getKeyStorePassword()).thenReturn("invalid_password");

        // Act
        RestTemplate result = (RestTemplate) getRestTemplateMethod.invoke(yourClass);

        // Assert
        assertNotNull(result);
        // Add assertions to verify it's a RestTemplate without SSL configuration
    }

    @Test
    void getRestTemplate_withException_returnsNull() throws Exception {
        // Arrange
        when(secureCredential.getKeyStorePassword()).thenThrow(new RuntimeException("Test exception"));

        // Act
        RestTemplate result = (RestTemplate) getRestTemplateMethod.invoke(yourClass);

        // Assert
        assertNull(result);
    }
}

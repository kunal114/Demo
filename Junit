import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;

class FileUploadFilterTest {

    @InjectMocks
    private FileUploadFilter fileUploadFilter;

    @Mock
    private Logger log;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private FilterChain filterChain;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testDoFilterInternal_ServletException() throws IOException {
        byte[] cachedFileBytes = new byte[0];
        ByteArrayInputStream bais = new ByteArrayInputStream(cachedFileBytes);
        when(request.getInputStream()).thenReturn(new DelegatingServletInputStream(bais));

        ServletException servletException = new ServletException("Simulated ServletException");
        doThrow(servletException).when(filterChain).doFilter(any(), any());

        assertThrows(ServletException.class, () -> {
            fileUploadFilter.doFilterInternal(request, response, filterChain);
        });

        verify(log).error(eq("Error while uploading request"), eq(servletException));
    }

    // A utility class to wrap ByteArrayInputStream as ServletInputStream
    static class DelegatingServletInputStream extends javax.servlet.ServletInputStream {
        private final ByteArrayInputStream bais;

        public DelegatingServletInputStream(ByteArrayInputStream bais) {
            this.bais = bais;
        }

        @Override
        public int read() throws IOException {
            return bais.read();
        }

        @Override
        public boolean isFinished() {
            return bais.available() == 0;
        }

        @Override
        public boolean isReady() {
            return true;
        }

        @Override
        public void setReadListener(javax.servlet.ReadListener readListener) {
            throw new UnsupportedOperationException();
        }
    }
}

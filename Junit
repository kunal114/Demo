import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.servlet.resource.ResourceResolver;
import org.springframework.web.servlet.resource.ResourceResolverChain;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ApplicationConfigurationTest {

    @Mock
    private ResourceHandlerRegistry resourceHandlerRegistry;

    @Mock
    private ResourceResolver resourceResolver;

    @InjectMocks
    private ApplicationConfiguration.BrowserHistoryConfigurer browserHistoryConfigurer;

    @Test
    void testAddResourceHandlers() {
        ResourceResolverChain resourceResolverChain = mock(ResourceResolverChain.class);
        when(resourceHandlerRegistry.addResourceLocations(ApplicationConfiguration.RESOURCE_LOCATIONS))
                .thenReturn(resourceHandlerRegistry);
        when(resourceHandlerRegistry.setCachePeriod(30))
                .thenReturn(resourceHandlerRegistry);
        when(resourceHandlerRegistry.resourceChain(true))
                .thenReturn(resourceResolverChain);
        when(resourceResolverChain.addResolver(any(ResourceResolver.class)))
                .thenReturn(resourceResolverChain);

        browserHistoryConfigurer.addResourceHandlers(resourceHandlerRegistry);

        verify(resourceHandlerRegistry).addResourceLocations(ApplicationConfiguration.RESOURCE_LOCATIONS);
        verify(resourceHandlerRegistry).setCachePeriod(30);
        verify(resourceHandlerRegistry).resourceChain(true);
        verify(resourceResolverChain).addResolver(any(ResourceResolver.class));
    }
}

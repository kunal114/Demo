Sure, here is an example of how you can write JUnit 5 tests for the `THSetterHustExistRule` class. We'll use Mockito to mock the `PojoClass` and `PojoField` dependencies.

First, ensure you have the necessary dependencies in your `pom.xml` or `build.gradle` for JUnit 5 and Mockito.

### JUnit 5 Test Class

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

public class THSetterHustExistRuleTest {

    private PojoClass pojoClass;
    private PojoField fieldWithSetter;
    private PojoField fieldWithoutSetter;
    private PojoField finalField;

    @BeforeEach
    public void setUp() {
        pojoClass = Mockito.mock(PojoClass.class);
        fieldWithSetter = Mockito.mock(PojoField.class);
        fieldWithoutSetter = Mockito.mock(PojoField.class);
        finalField = Mockito.mock(PojoField.class);

        when(fieldWithSetter.getName()).thenReturn("fieldWithSetter");
        when(fieldWithSetter.isFinal()).thenReturn(false);
        when(fieldWithSetter.hasSetter()).thenReturn(true);

        when(fieldWithoutSetter.getName()).thenReturn("fieldWithoutSetter");
        when(fieldWithoutSetter.isFinal()).thenReturn(false);
        when(fieldWithoutSetter.hasSetter()).thenReturn(false);

        when(finalField.getName()).thenReturn("finalField");
        when(finalField.isFinal()).thenReturn(true);
        when(finalField.hasSetter()).thenReturn(false);

        List<PojoField> pojoFields = new ArrayList<>();
        pojoFields.add(fieldWithSetter);
        pojoFields.add(fieldWithoutSetter);
        pojoFields.add(finalField);

        when(pojoClass.getPojoFields()).thenReturn(pojoFields);
    }

    @Test
    public void testEvaluate_withValidSetters() {
        THSetterHustExistRule rule = new THSetterHustExistRule();

        // The test should pass without throwing an exception
        assertDoesNotThrow(() -> rule.evaluate(pojoClass));
    }

    @Test
    public void testEvaluate_missingSetter() {
        THSetterHustExistRule rule = new THSetterHustExistRule();

        // The test should throw an exception due to missing setter
        Exception exception = assertThrows(RuntimeException.class, () -> rule.evaluate(pojoClass));
        assert(exception.getMessage().contains("fieldWithoutSetter is missing a setter"));
    }

    @Test
    public void testEvaluate_withSkipList() {
        List<String> skipList = new ArrayList<>();
        skipList.add("fieldWithoutSetter");
        THSetterHustExistRule rule = new THSetterHustExistRule(skipList);

        // The test should pass without throwing an exception
        assertDoesNotThrow(() -> rule.evaluate(pojoClass));
    }

    @Test
    public void testEvaluate_withFinalField() {
        THSetterHustExistRule rule = new THSetterHustExistRule();

        // The test should pass without throwing an exception since the final field doesn't require a setter
        assertDoesNotThrow(() -> rule.evaluate(pojoClass));
    }
}
```

### Explanation

1. **Dependencies**: We assume the `PojoClass` and `PojoField` are from an external library or another part of your codebase. Make sure to import them properly.

2. **Setup**: The `@BeforeEach` method sets up the mocks for `PojoClass` and `PojoField`. This includes defining fields with and without setters, and a final field.

3. **Test Methods**:
   - `testEvaluate_withValidSetters()`: Verifies that the rule passes when all fields have setters.
   - `testEvaluate_missingSetter()`:

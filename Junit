import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.client.RestTemplate;

import java.io.FileInputStream;
import java.security.KeyStore;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class YourClassTest {

    @Mock
    private SecureCredential secureCredential;

    private YourClass yourClass;

    @BeforeEach
    void setUp() {
        yourClass = new YourClass(secureCredential);
        yourClass.setKeyStorePath("path/to/keystore.jks");
    }

    @Test
    void getRestTemplate_withValidKeyStore_returnsRestTemplate() throws Exception {
        // Arrange
        when(secureCredential.getKeyStorePassword()).thenReturn("password");
        
        // Mock KeyStore and FileInputStream
        KeyStore mockKeyStore = mock(KeyStore.class);
        try (MockedStatic<KeyStore> mockedKeyStore = mockStatic(KeyStore.class)) {
            mockedKeyStore.when(() -> KeyStore.getInstance("JKS")).thenReturn(mockKeyStore);
            
            try (MockedStatic<FileInputStream> mockedFileInputStream = mockStatic(FileInputStream.class)) {
                FileInputStream mockFileInputStream = mock(FileInputStream.class);
                mockedFileInputStream.whenNew(FileInputStream.class).withAnyArguments().thenReturn(mockFileInputStream);

                // Act
                RestTemplate result = yourClass.getRestTemplate();

                // Assert
                assertNotNull(result);
                assertEquals(2, result.getMessageConverters().size());
                verify(mockKeyStore).load(any(FileInputStream.class), any(char[].class));
            }
        }
    }

    @Test
    void getRestTemplate_withInvalidKeyStore_returnsRestTemplateWithoutSSL() throws Exception {
        // Arrange
        when(secureCredential.getKeyStorePassword()).thenReturn("invalid_password");

        // Act
        RestTemplate result = yourClass.getRestTemplate();

        // Assert
        assertNotNull(result);
        assertEquals(0, result.getMessageConverters().size());
    }

    @Test
    void getRestTemplate_withException_returnsNull() throws Exception {
        // Arrange
        when(secureCredential.getKeyStorePassword()).thenThrow(new RuntimeException("Test exception"));

        // Act
        RestTemplate result = yourClass.getRestTemplate();

        // Assert
        assertNull(result);
    }
}

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

import javax.sql.DataSource;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AwsRdsAuroraMySqlConfigurationLocalTest {

    private AwsRdsAuroraMySqlConfigurationLocal configurationLocal;

    @BeforeEach
    void setUp() {
        configurationLocal = new AwsRdsAuroraMySqlConfigurationLocal();
    }

    @Test
    void testAwsRdsAuroraMySqlDataSource_WithDbAuthToken() {
        ReflectionTestUtils.setField(configurationLocal, "dbAuthToken", "testToken");
        Properties props = new Properties();
        when(configurationLocal.getProps()).thenReturn(props);

        DataSource dataSource = configurationLocal.awsRdsAuroraMySqlDataSource();
        assertNotNull(dataSource);

        Properties connectionProps = (Properties) ReflectionTestUtils.getField(dataSource, "connectionProperties");
        assertEquals("false", connectionProps.getProperty("PROP_AWS_IAM"));
        assertEquals("testToken", connectionProps.getProperty("password"));
    }

    @Test
    void testAwsRdsAuroraMySqlDataSource_WithoutDbAuthToken() {
        ReflectionTestUtils.setField(configurationLocal, "dbAuthToken", "na");
        Properties props = new Properties();
        when(configurationLocal.getProps()).thenReturn(props);

        DataSource dataSource = configurationLocal.awsRdsAuroraMySqlDataSource();
        assertNotNull(dataSource);

        Properties connectionProps = (Properties) ReflectionTestUtils.getField(dataSource, "connectionProperties");
        assertEquals("true", connectionProps.getProperty("PROP_AWS_IAM"));
    }

    @Nested
    class GetPropsForLocalTests {
        @Test
        void testGetPropsForLocal_WithDbAuthToken() {
            ReflectionTestUtils.setField(configurationLocal, "dbAuthToken", "testToken");
            Properties props = new Properties();
            when(configurationLocal.getProps()).thenReturn(props);

            Properties returnedProps = configurationLocal.getPropsForLocal();
            assertNotNull(returnedProps);
            assertEquals("false", returnedProps.getProperty("PROP_AWS_IAM"));
            assertEquals("testToken", returnedProps.getProperty("password"));
        }

        @Test
        void testGetPropsForLocal_WithoutDbAuthToken() {
            ReflectionTestUtils.setField(configurationLocal, "dbAuthToken", "na");
            Properties props = new Properties();
            when(configurationLocal.getProps()).thenReturn(props);

            Properties returnedProps = configurationLocal.getPropsForLocal();
            assertNotNull(returnedProps);
            assertEquals("true", returnedProps.getProperty("PROP_AWS_IAM"));
        }
    }
}

import builtins
import os
import sys
import boto3
import pytest
from mock.mock import MagicMock

from moto import mock_aws
os.environ["AWS_DEFAULT_REGION"] = 'us-east-1'

# Add the src directory to the Python path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))

# Import from the specific path in your project structure
from fiportal_secret_rotation_lambda.lambda_function import lambda_handler

@mock_aws
def test_create_secret():
    # Create Secrets Manager client
    secretsmanager_client = boto3.client('secretsmanager')
    
    # Create a test secret
    secret_arn = secretsmanager_client.create_secret(
        Name='test-fiportal-secret',
        SecretString='{"username": "testuser", "password": "oldpassword"}'
    )['ARN']
    
    # Prepare test event for createSecret step
    event = {
        'Step': 'createSecret',
        'SecretId': secret_arn,
        'ClientRequestToken': 'test-token-create'
    }
    context = {}

    # Call lambda handler
    lambda_handler(event, context)

    # Verify AWSPENDING version was created
    secret_versions = secretsmanager_client.describe_secret(SecretId=secret_arn)['VersionIdsToStages']
    assert 'test-token-create' in secret_versions
    assert 'AWSPENDING' in secret_versions['test-token-create']

@mock_aws
def test_finish_secret():
    # Create Secrets Manager client
    secretsmanager_client = boto3.client('secretsmanager')
    
    # Create a test secret
    secret_arn = secretsmanager_client.create_secret(
        Name='test-fiportal-secret',
        SecretString='{"username": "testuser", "password": "oldpassword"}'
    )['ARN']
    
    # First, create a pending secret
    create_event = {
        'Step': 'createSecret',
        'SecretId': secret_arn,
        'ClientRequestToken': 'test-token-finish'
    }
    lambda_handler(create_event, {})

    # Now finish the secret rotation
    finish_event = {
        'Step': 'finishSecret',
        'SecretId': secret_arn,
        'ClientRequestToken': 'test-token-finish'
    }
    lambda_handler(finish_event, {})

    # Verify version stages
    secret_versions = secretsmanager_client.describe_secret(SecretId=secret_arn)['VersionIdsToStages']
    assert 'test-token-finish' in secret_versions
    assert 'AWSCURRENT' in secret_versions['test-token-finish']

@mock_aws
def test_update_secret():
    # Create Secrets Manager client
    secretsmanager_client = boto3.client('secretsmanager')
    
    # Create a test secret
    secret_arn = secretsmanager_client.create_secret(
        Name='test-fiportal-secret',
        SecretString='{"username": "testuser", "password": "oldpassword"}'
    )['ARN']
    
    # Prepare test data
    new_password = 'newpassword123!'

    # Create event for update secret
    event = {
        'Step': 'updateSecret',
        'SecretId': secret_arn,
        'Password': new_password,
        'ClientRequestToken': 'test-token-update'
    }
    context = {}

    # Call lambda handler
    lambda_handler(event, context)

    # Retrieve updated secret
    updated_secret = secretsmanager_client.get_secret_value(
        SecretId=secret_arn,
        VersionStage='AWSCURRENT'
    )
    updated_secret_data = updated_secret['SecretString']
    assert new_password in updated_secret_data

@mock_aws
def test_invalid_step():
    # Create Secrets Manager client
    secretsmanager_client = boto3.client('secretsmanager')
    
    # Create a test secret
    secret_arn = secretsmanager_client.create_secret(
        Name='test-fiportal-secret',
        SecretString='{"username": "testuser", "password": "oldpassword"}'
    )['ARN']
    
    # Prepare event with invalid step
    event = {
        'Step': 'invalidStep',
        'SecretId': secret_arn,
        'ClientRequestToken': 'test-token-invalid'
    }
    context = {}

    # Expect ValueError for invalid step
    with pytest.raises(ValueError, match='Invalid request step parameter'):
        lambda_handler(event, context)

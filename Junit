import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import RFE

class DynamicFeatureSelector:
    def __init__(self, n_outputs):
        self.n_outputs = n_outputs
        self.models = [RandomForestClassifier(n_estimators=100, random_state=42) for _ in range(n_outputs)]
        self.feature_selectors = [RFE(estimator=RandomForestClassifier(n_estimators=10, random_state=42), n_features_to_select=1, step=1) for _ in range(n_outputs)]
        self.selected_features = [None] * n_outputs

    def fit(self, X, y):
        for i in range(self.n_outputs):
            # Perform feature selection
            self.feature_selectors[i].fit(X, y[:, i])
            self.selected_features[i] = X.columns[self.feature_selectors[i].support_].tolist()
            
            # Train the model on selected features
            self.models[i].fit(X[self.selected_features[i]], y[:, i])

    def predict(self, X):
        predictions = []
        for i in range(self.n_outputs):
            pred = self.models[i].predict(X[self.selected_features[i]])
            predictions.append(pred)
        return np.column_stack(predictions)

def preprocess_data(data):
    # Replace null values with NaN
    data = data.replace('', np.nan)
    
    # Identify numeric and categorical columns
    numeric_columns = data.select_dtypes(include=[np.number]).columns
    categorical_columns = data.select_dtypes(exclude=[np.number]).columns
    
    # Impute missing values
    numeric_imputer = SimpleImputer(strategy='mean')
    categorical_imputer = SimpleImputer(strategy='most_frequent')
    
    data[numeric_columns] = numeric_imputer.fit_transform(data[numeric_columns])
    data[categorical_columns] = categorical_imputer.fit_transform(data[categorical_columns])
    
    # Encode categorical variables
    data = pd.get_dummies(data, columns=categorical_columns)
    
    return data

# Main execution
if __name__ == "__main__":
    # Load your data
    data = pd.read_csv("your_data.csv")
    
    # Preprocess the data
    processed_data = preprocess_data(data)
    
    # Separate features and targets
    X = processed_data.drop(['output1', 'output2', ..., 'outputN'], axis=1)
    y = processed_data[['output1', 'output2', ..., 'outputN']]
    
    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Initialize and train the model
    model = DynamicFeatureSelector(n_outputs=y.shape[1])
    model.fit(X_train, y_train)
    
    # Make predictions
    y_pred = model.predict(X_test)
    
    # Evaluate the model
    for i in range(y.shape[1]):
        accuracy = accuracy_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"Accuracy for output {i+1}: {accuracy}")
        print(f"Selected features for output {i+1}: {model.selected_features[i]}")

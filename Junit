import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer;
import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
import org.springframework.security.web.SecurityFilterChain;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class SecurityConfigurationTest {

    @Mock
    private HttpSecurity http;

    @Mock
    private AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizationManagerRequestMatcherRegistry authRegistry;

    @Mock
    private AuthorizeHttpRequestsConfigurer<HttpSecurity>.AuthorizedUrl authorizedUrl;

    @Mock
    private CsrfConfigurer<HttpSecurity> csrfConfigurer;

    @Mock
    private SecurityFilterChain securityFilterChain;

    @Test
    void test_filterChain() throws Exception {
        SecurityConfiguration config = new SecurityConfiguration();

        // Mock the chained method calls
        when(http.authorizeHttpRequests()).thenReturn(authRegistry);
        when(authRegistry.anyRequest()).thenReturn(authorizedUrl);
        when(authorizedUrl.permitAll()).thenReturn(authRegistry);
        when(authRegistry.and()).thenReturn(http);
        when(http.csrf()).thenReturn(csrfConfigurer);
        when(csrfConfigurer.disable()).thenReturn(http);
        when(http.build()).thenReturn(securityFilterChain);

        SecurityFilterChain result = config.filterChain(http);

        assertNotNull(result);
    }
}

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TokenRefreshingDataSourceTest {

    @Mock
    private DriverManagerDataSource mockDelegate;
    @Mock
    private EPVConfigVSI mockEpvConfigVSI;
    @Mock
    private AwardsDbPasswordFetch mockAwsRdsDbPasswordFetch;
    @Mock
    private Connection mockConnection;

    private TokenRefreshingDataSource tokenRefreshingDataSource;

    @BeforeEach
    void setUp() throws Exception {
        // Set up any necessary properties
        when(mockDelegate.getUrl()).thenReturn("jdbc:mysql://localhost:3306/testdb");
        when(mockDelegate.getUsername()).thenReturn("testuser");
        when(mockDelegate.getPassword()).thenReturn("testpassword");
        when(mockDelegate.getConnectionProperties()).thenReturn(new Properties());

        tokenRefreshingDataSource = new TokenRefreshingDataSource(mockDelegate, mockEpvConfigVSI, mockAwsRdsDbPasswordFetch);

        // Set up default behavior for mocks
        when(mockDelegate.getConnection()).thenReturn(mockConnection);
        when(mockEpvConfigVSI.retrieveEpvPasswordForAwsRds()).thenReturn("fidpss");
        when(mockAwsRdsDbPasswordFetch.getAuthToken(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean(), anyBoolean()))
                .thenReturn("newToken");
    }

    @Test
    void getConnection_shouldRefreshTokenAndReturnConnection() throws Exception {
        // Act
        Connection result = tokenRefreshingDataSource.getConnection();

        // Assert
        assertThat(result).isEqualTo(mockConnection);
        verify(mockDelegate, atLeastOnce()).setPassword(anyString());
        verify(mockDelegate).getConnection();
    }

    @Test
    void getConnection_shouldThrowSQLExceptionWhenTokenRefreshFails() throws Exception {
        // Arrange
        when(mockEpvConfigVSI.retrieveEpvPasswordForAwsRds()).thenThrow(new RuntimeException("Token fetch failed"));

        // Act & Assert
        assertThatThrownBy(() -> tokenRefreshingDataSource.getConnection())
                .isInstanceOf(SQLException.class)
                .hasMessageContaining("Failed to refresh database token");
    }

    @Test
    void getConnection_withCredentials_shouldRefreshTokenAndReturnConnection() throws Exception {
        // Act
        Connection result = tokenRefreshingDataSource.getConnection("username", "password");

        // Assert
        assertThat(result).isEqualTo(mockConnection);
        verify(mockDelegate, atLeastOnce()).setPassword(anyString());
        verify(mockDelegate).getConnection("username", "password");
    }

    @Test
    void refreshToken_shouldUpdateConnectionProperties() throws Exception {
        // Arrange
        Properties props = new Properties();
        when(mockDelegate.getConnectionProperties()).thenReturn(props);

        // Act
        tokenRefreshingDataSource.getConnection();

        // Assert
        assertThat(props).containsKey("password");
        verify(mockDelegate, atLeastOnce()).setConnectionProperties(any(Properties.class));
    }
}

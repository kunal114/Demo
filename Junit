import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.mock.web.MockServletContext;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;

import static org.junit.jupiter.api.Assertions.assertNotNull;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class SecurityConfigurationTest {

    private MockMvc mockMvc;
    private SecurityConfiguration securityConfiguration;

    @BeforeAll
    void setup() {
        securityConfiguration = new SecurityConfiguration();
        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();
        context.setServletContext(new MockServletContext());
        context.register(SecurityConfiguration.class);
        context.refresh();

        SecurityFilterChain filterChain = context.getBean(SecurityFilterChain.class);
        assertNotNull(filterChain);

        this.mockMvc = MockMvcBuilders.webAppContextSetup(context).addFilters(filterChain).build();
    }

    @Test
    void testPublicEndpointsAreAccessible() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.get("/"))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testFilterChainBean() throws Exception {
        SecurityFilterChain filterChain = securityConfiguration.filterChain(HttpSecurity.http());
        assertNotNull(filterChain);
    }

    @Test
    void testWebSecurityCustomizerBean() throws Exception {
        WebSecurityCustomizer webSecurityCustomizer = securityConfiguration.webSecurityCustomizer();
        assertNotNull(webSecurityCustomizer);

        Object ignoreRequestMatchers = ReflectionTestUtils.invokeMethod(webSecurityCustomizer, "ignoring");
        assertNotNull(ignoreRequestMatchers);
    }
}

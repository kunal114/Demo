import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

public class TokenRefreshingDataSource implements DataSource {
    private static final Logger LOGGER = LoggerFactory.getLogger(TokenRefreshingDataSource.class);

    private final DriverManagerDataSource delegate;
    private final EPVConfigVSI epvConfigVSI;
    private final AwardsDbPasswordFetch awsRdsDbPasswordFetch;
    private volatile long lastRefreshTime;
    private final Object lock = new Object();

    public TokenRefreshingDataSource(DriverManagerDataSource delegate, EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) {
        this.delegate = delegate;
        this.epvConfigVSI = epvConfigVSI;
        this.awsRdsDbPasswordFetch = awsRdsDbPasswordFetch;
        this.lastRefreshTime = System.currentTimeMillis();
    }

    @Override
    public Connection getConnection() throws SQLException {
        refreshTokenIfNeeded();
        return delegate.getConnection();
    }

    @Override
    public Connection getConnection(String username, String password) throws SQLException {
        refreshTokenIfNeeded();
        return delegate.getConnection(username, password);
    }

    private void refreshTokenIfNeeded() throws SQLException {
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastRefreshTime > 840000) { // 14 minutes in milliseconds
            synchronized (lock) {
                if (currentTime - lastRefreshTime > 840000) {  // Double-check
                    try {
                        String newToken = getToken(epvConfigVSI, awsRdsDbPasswordFetch);
                        Properties props = delegate.getConnectionProperties();
                        props.setProperty("password", newToken);
                        delegate.setConnectionProperties(props);
                        lastRefreshTime = currentTime;
                        LOGGER.info("Token refreshed successfully");
                    } catch (Exception e) {
                        LOGGER.error("Failed to refresh token", e);
                        throw new SQLException("Failed to refresh database token", e);
                    }
                }
            }
        }
    }

    private String getToken(EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) throws Exception {
        String fidpss = epvConfigVSI.retrieveEpvPasswordForAwsRds();
        return awsRdsDbPasswordFetch.getAuthToken(/* Add your parameters here */);
    }

    // Implement other DataSource methods, delegating to the wrapped DataSource
    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return delegate.unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return delegate.isWrapperFor(iface);
    }

    // ... implement other DataSource methods ...

    // For testing purposes
    void setLastRefreshTimeForTesting(long time) {
        this.lastRefreshTime = time;
    }
}

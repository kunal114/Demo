import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;
import java.io.FileInputStream;
import java.security.KeyStore;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RestTemplateFactoryTest {

    @InjectMocks
    private RestTemplateFactory restTemplateFactory;

    @Mock
    private SecureCredentialConfig secureCredentialConfig;

    @Mock
    private KeyStore mockKeyStore;

    @Mock
    private SSLContext mockSslContext;

    private static final String TEST_KEYSTORE_PATH = "path/to/keystore.jks";

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(restTemplateFactory, "keyStorePath", TEST_KEYSTORE_PATH);
    }

    @Test
    void testGetRestTemplate_Success() throws Exception {
        // Arrange
        when(secureCredentialConfig.getKeystorePassword()).thenReturn("password");

        try (MockedStatic<KeyStore> keyStoreMockedStatic = mockStatic(KeyStore.class);
             MockedStatic<SSLContext> sslContextMockedStatic = mockStatic(SSLContext.class);
             MockedStatic<FileInputStream> fileInputStreamMockedStatic = mockStatic(FileInputStream.class)) {

            keyStoreMockedStatic.when(() -> KeyStore.getInstance("JKS")).thenReturn(mockKeyStore);
            sslContextMockedStatic.when(() -> SSLContext.getInstance("TLSv1.2")).thenReturn(mockSslContext);
            fileInputStreamMockedStatic.when(() -> new FileInputStream(TEST_KEYSTORE_PATH)).thenReturn(mock(FileInputStream.class));

            // Act
            RestTemplate restTemplate = restTemplateFactory.getRestTemplate();

            // Assert
            assertNotNull(restTemplate);
            assertTrue(restTemplate.getMessageConverters().stream()
                    .anyMatch(converter -> converter instanceof MappingJackson2HttpMessageConverter));

            // Verify
            keyStoreMockedStatic.verify(() -> KeyStore.getInstance("JKS"));
            sslContextMockedStatic.verify(() -> SSLContext.getInstance("TLSv1.2"));
            fileInputStreamMockedStatic.verify(() -> new FileInputStream(TEST_KEYSTORE_PATH));
        }
    }

    @Test
    void testGetRestTemplate_Exception() {
        // Arrange
        when(secureCredentialConfig.getKeystorePassword()).thenThrow(new RuntimeException("Test exception"));

        // Act
        RestTemplate restTemplate = restTemplateFactory.getRestTemplate();

        // Assert
        assertNull(restTemplate);
    }
}

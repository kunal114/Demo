import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TokenRefreshingDataSourceTest {

    @Mock
    private EPVConfigVSI epvConfigVSI;

    @Mock
    private AwardsDbPasswordFetch awsRdsDbPasswordFetch;

    @Mock
    private DriverManagerDataSource delegateDataSource;

    private TokenRefreshingDataSource tokenRefreshingDataSource;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        // Mock behaviors of delegateDataSource
        when(delegateDataSource.getUrl()).thenReturn("jdbc:mysql://localhost/test");
        when(delegateDataSource.getUsername()).thenReturn("testuser");
        when(delegateDataSource.getPassword()).thenReturn("testpass");
        Properties props = new Properties();
        props.setProperty("password", "testpass");
        when(delegateDataSource.getConnectionProperties()).thenReturn(props);

        // Initialize TokenRefreshingDataSource
        tokenRefreshingDataSource = new TokenRefreshingDataSource(delegateDataSource, epvConfigVSI, awsRdsDbPasswordFetch);
    }

    @Test
    void testGetConnection() throws SQLException {
        // Mock connection
        Connection mockConnection = mock(Connection.class);
        when(delegateDataSource.getConnection()).thenReturn(mockConnection);

        // Act
        Connection connection = tokenRefreshingDataSource.getConnection();

        // Assert
        assertNotNull(connection);
        verify(delegateDataSource, times(1)).getConnection();
    }

    @Test
    void testRefreshTokenIfNeeded_Success() throws Exception {
        // Simulate token refresh
        when(awsRdsDbPasswordFetch.getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean())).thenReturn("newToken");

        // Set lastRefreshTime to trigger refresh
        long currentTime = System.currentTimeMillis();
        ReflectionTestUtils.setField(tokenRefreshingDataSource, "lastRefreshTime", currentTime - 850000);

        // Act - Trigger token refresh
        tokenRefreshingDataSource.getConnection();

        // Assert
        verify(awsRdsDbPasswordFetch, times(1)).getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean());

        // Verify connection properties are updated
        Properties props = tokenRefreshingDataSource.getConnectionProperties();
        assertEquals("newToken", props.getProperty("password"));
        assertTrue((Long) ReflectionTestUtils.getField(tokenRefreshingDataSource, "lastRefreshTime") >= currentTime);
    }

    @Test
    void testRefreshTokenIfNeeded_NoRefreshNeeded() throws Exception {
        // Set lastRefreshTime to not trigger refresh
        ReflectionTestUtils.setField(tokenRefreshingDataSource, "lastRefreshTime", System.currentTimeMillis());

        // Act - Call getConnection without triggering token refresh
        tokenRefreshingDataSource.getConnection();

        // Assert
        verify(awsRdsDbPasswordFetch, never()).getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean());

        // Verify connection properties remain unchanged
        Properties props = tokenRefreshingDataSource.getConnectionProperties();
        assertEquals("testpass", props.getProperty("password"));
    }
}

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
public class DataSourceConfig {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceConfig.class);

    @Bean
    public DataSource awsRdsAuroraMySqlDataSource(EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) throws Exception {
        try {
            final var props = getPropsForLocal(epvConfigVSI, awsRdsDbPasswordFetch);
            LOGGER.info("Data Base type Lookup for datasource started");
            DriverManagerDataSource ds = getDataSource();
            ds.setConnectionProperties(props);
            return new TokenRefreshingDataSource(ds, epvConfigVSI, awsRdsDbPasswordFetch);
        } catch (Throwable t) {
            LOGGER.error("Password Expired! (", t);
            throw new RuntimeException("Failed to create DataSource", t);
        }
    }

    private Properties getPropsForLocal(EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) throws Exception {
        var props = getProps();
        if (dbAuthToken != null && dbAuthToken.equalsIgnoreCase("na")) {
            props.setProperty(PROP_AWS_IAM, Boolean.TRUE.toString());
        } else {
            props.setProperty(PROP_AWS_IAM, Boolean.FALSE.toString());
            dbAuthToken = getToken(epvConfigVSI, awsRdsDbPasswordFetch);
            props.setProperty("password", dbAuthToken);
        }
        return props;
    }

    private String getToken(EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) throws Exception {
        String fidpss = epvConfigVSI.retrieveEpvPasswordForAwsRds();
        return awsRdsDbPasswordFetch.getAuthToken(/* add your parameters here */);
    }

    // Assume these methods are implemented elsewhere in your class
    protected DriverManagerDataSource getDataSource() { /* ... */ }
    protected Properties getProps() { /* ... */ }
}

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.client.RestTemplate;

import java.io.FileInputStream;
import java.security.KeyStore;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RestTemplateProviderTest {

    @Mock
    private KeyStore mockKeyStore;

    @Mock
    private FileInputStream mockFileInputStream;

    private RestTemplateProvider restTemplateProvider;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        restTemplateProvider = new RestTemplateProvider();
        restTemplateProvider.setKeystorePath("path/to/keystore.jks");
    }

    @Test
    void testGetRestTemplate_Success() throws Exception {
        // Mocking necessary dependencies
        mockStatic(KeyStore.class);
        when(KeyStore.getInstance("JKS")).thenReturn(mockKeyStore);

        // Test
        RestTemplate result = restTemplateProvider.getRestTemplate();

        // Assertions
        assertNotNull(result);
        assertTrue(result.getMessageConverters().stream()
                .anyMatch(converter -> converter instanceof MappingJackson2HttpMessageConverter));
        assertTrue(result.getMessageConverters().stream()
                .anyMatch(converter -> converter instanceof StringHttpMessageConverter));
    }

    @Test
    void testGetRestTemplate_IOExceptionHandling() throws Exception {
        // Mocking necessary dependencies
        mockStatic(KeyStore.class);
        when(KeyStore.getInstance("JKS")).thenReturn(mockKeyStore);
        doThrow(new IOException("Test IO Exception")).when(mockKeyStore).load(any(), any());

        // Test
        RestTemplate result = restTemplateProvider.getRestTemplate();

        // Assertions
        assertNull(result);
        // Verify that error was logged (you might need to mock your logger)
    }

    @Test
    void testGetRestTemplate_NoSuchAlgorithmExceptionHandling() throws Exception {
        // Mocking necessary dependencies
        mockStatic(KeyStore.class);
        when(KeyStore.getInstance("JKS")).thenThrow(new NoSuchAlgorithmException("Test Algorithm Exception"));

        // Test
        RestTemplate result = restTemplateProvider.getRestTemplate();

        // Assertions
        assertNull(result);
        // Verify that error was logged (you might need to mock your logger)
    }

    @Test
    void testGetRestTemplate_CertificateExceptionHandling() throws Exception {
        // Mocking necessary dependencies
        mockStatic(KeyStore.class);
        when(KeyStore.getInstance("JKS")).thenReturn(mockKeyStore);
        doThrow(new CertificateException("Test Certificate Exception")).when(mockKeyStore).load(any(), any());

        // Test
        RestTemplate result = restTemplateProvider.getRestTemplate();

        // Assertions
        assertNull(result);
        // Verify that error was logged (you might need to mock your logger)
    }

    @Test
    void testGetRestTemplate_GeneralExceptionHandling() throws Exception {
        // Mocking necessary dependencies
        mockStatic(KeyStore.class);
        when(KeyStore.getInstance("JKS")).thenThrow(new RuntimeException("Test General Exception"));

        // Test
        RestTemplate result = restTemplateProvider.getRestTemplate();

        // Assertions
        assertNull(result);
        // Verify that error was logged (you might need to mock your logger)
    }
}

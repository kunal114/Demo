import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class DataSourceConfigTest {

    @Mock
    private EPVConfigVSI epvConfigVSI;

    @Mock
    private AwardsDbPasswordFetch awsRdsDbPasswordFetch;

    @Mock
    private Connection mockConnection;

    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    void setUp() {
        dataSourceConfig = new DataSourceConfig();
    }

    @Test
    void testAwsRdsAuroraMySqlDataSource() throws Exception {
        // Arrange
        Properties mockProps = new Properties();
        mockProps.setProperty("password", "initialToken");
        when(dataSourceConfig.getPropsForLocal(any(), any())).thenReturn(mockProps);
        
        DriverManagerDataSource mockDs = mock(DriverManagerDataSource.class);
        when(dataSourceConfig.getDataSource()).thenReturn(mockDs);

        // Act
        DataSource result = dataSourceConfig.awsRdsAuroraMySqlDataSource(epvConfigVSI, awsRdsDbPasswordFetch);

        // Assert
        assertNotNull(result);
        assertTrue(result instanceof TokenRefreshingDataSource);
        verify(mockDs).setConnectionProperties(mockProps);
    }

    @Test
    void testTokenRefreshingDataSource_GetConnection() throws Exception {
        // Arrange
        DriverManagerDataSource mockDelegate = mock(DriverManagerDataSource.class);
        when(mockDelegate.getConnection()).thenReturn(mockConnection);

        when(dataSourceConfig.getToken(any(), any())).thenReturn("newToken");

        TokenRefreshingDataSource tokenRefreshingDataSource = 
            new DataSourceConfig().new TokenRefreshingDataSource(mockDelegate, epvConfigVSI, awsRdsDbPasswordFetch);

        // Act
        Connection connection = tokenRefreshingDataSource.getConnection();

        // Assert
        assertNotNull(connection);
        assertEquals(mockConnection, connection);
    }

    @Test
    void testTokenRefreshingDataSource_TokenRefresh() throws Exception {
        // Arrange
        DriverManagerDataSource mockDelegate = mock(DriverManagerDataSource.class);
        when(mockDelegate.getConnection()).thenReturn(mockConnection);

        when(dataSourceConfig.getToken(any(), any())).thenReturn("newToken");

        TokenRefreshingDataSource tokenRefreshingDataSource = 
            new DataSourceConfig().new TokenRefreshingDataSource(mockDelegate, epvConfigVSI, awsRdsDbPasswordFetch);

        // Act
        tokenRefreshingDataSource.getConnection(); // First call
        Thread.sleep(850000); // Sleep for more than 14 minutes
        tokenRefreshingDataSource.getConnection(); // Second call, should trigger refresh

        // Assert
        verify(dataSourceConfig, times(1)).getToken(any(), any());
    }

    @Test
    void testTokenRefreshingDataSource_RefreshFailure() throws Exception {
        // Arrange
        DriverManagerDataSource mockDelegate = mock(DriverManagerDataSource.class);
        when(mockDelegate.getConnection()).thenReturn(mockConnection);

        when(dataSourceConfig.getToken(any(), any())).thenThrow(new RuntimeException("Token fetch failed"));

        TokenRefreshingDataSource tokenRefreshingDataSource = 
            new DataSourceConfig().new TokenRefreshingDataSource(mockDelegate, epvConfigVSI, awsRdsDbPasswordFetch);

        // Act & Assert
        Thread.sleep(850000); // Sleep for more than 14 minutes
        assertThrows(SQLException.class, () -> tokenRefreshingDataSource.getConnection());
    }
}

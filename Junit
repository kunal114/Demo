@Configuration
public class DataSourceConfig {

    private static final Logger LOGGER = LoggerFactory.getLogger(DataSourceConfig.class);

    @Bean
    public DataSource awsRdsAuroraMySqlDataSource(EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) throws Exception {
        try {
            final var props = getPropsForLocal(epvConfigVSI, awsRdsDbPasswordFetch);
            LOGGER.info("Data Base type Lookup for datasource started");
            DriverManagerDataSource ds = getDataSource();
            ds.setConnectionProperties(props);
            return new TokenRefreshingDataSource(ds, epvConfigVSI, awsRdsDbPasswordFetch);
        } catch (Throwable t) {
            LOGGER.error("Error creating DataSource", t);
            throw new RuntimeException("Failed to create DataSource", t);
        }
    }

    // ... other methods remain the same ...

    private class TokenRefreshingDataSource extends DriverManagerDataSource {
        private final EPVConfigVSI epvConfigVSI;
        private final AwardsDbPasswordFetch awsRdsDbPasswordFetch;
        private volatile long lastRefreshTime;
        private final Object lock = new Object();

        public TokenRefreshingDataSource(DriverManagerDataSource delegate, EPVConfigVSI epvConfigVSI, AwardsDbPasswordFetch awsRdsDbPasswordFetch) {
            super();
            this.setUrl(delegate.getUrl());
            this.setUsername(delegate.getUsername());
            this.setPassword(delegate.getPassword());
            this.setConnectionProperties(delegate.getConnectionProperties());
            this.epvConfigVSI = epvConfigVSI;
            this.awsRdsDbPasswordFetch = awsRdsDbPasswordFetch;
            this.lastRefreshTime = System.currentTimeMillis();
        }

        @Override
        public Connection getConnection() throws SQLException {
            refreshTokenIfNeeded();
            return super.getConnection();
        }

        @Override
        public Connection getConnection(String username, String password) throws SQLException {
            refreshTokenIfNeeded();
            return super.getConnection(username, password);
        }

        private void refreshTokenIfNeeded() throws SQLException {
            long currentTime = System.currentTimeMillis();
            if (currentTime - lastRefreshTime > 840000) { // 14 minutes in milliseconds
                synchronized (lock) {
                    if (currentTime - lastRefreshTime > 840000) {  // Double-check
                        try {
                            String newToken = getToken(epvConfigVSI, awsRdsDbPasswordFetch);
                            this.setPassword(newToken);
                            // Optionally, update connection properties if needed
                            Properties props = getConnectionProperties();
                            props.setProperty("password", newToken);
                            setConnectionProperties(props);
                            lastRefreshTime = currentTime;
                            LOGGER.info("Token refreshed successfully");
                        } catch (Exception e) {
                            LOGGER.error("Failed to refresh token", e);
                            throw new SQLException("Failed to refresh database token", e);
                        }
                    }
                }
            }
        }
    }
}

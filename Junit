import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class MOCLoggingFilterTest {
    // ... (existing setup and other test cases)

    @Test
    void testPopulateJanusId() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        String customerId = "123456";
        when(mockRequest.getAttribute("someAttribute")).thenReturn(customerId);

        Method populateJanusIdMethod = MOCLoggingFilter.class.getDeclaredMethod("populateJanusId", HttpServletRequest.class);
        populateJanusIdMethod.setAccessible(true);
        populateJanusIdMethod.invoke(filter, mockRequest);

        verify(mockRequest, times(1)).setAttribute(Constants.JANUS_SID, customerId);
        // Add additional verifications if needed
    }

    @Test
    void testPopulateJanusIdWithEmptyCustomerId() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        String customerId = "";
        when(mockRequest.getAttribute("someAttribute")).thenReturn(customerId);

        Method populateJanusIdMethod = MOCLoggingFilter.class.getDeclaredMethod("populateJanusId", HttpServletRequest.class);
        populateJanusIdMethod.setAccessible(true);
        populateJanusIdMethod.invoke(filter, mockRequest);

        verify(mockRequest, never()).setAttribute(eq(Constants.JANUS_SID), anyString());
        // Add additional verifications if needed
    }

    // ... (any additional test cases)
}

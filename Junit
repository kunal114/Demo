import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class BreakIdentificationTest {

    @Test
    public void testConstructorWithAllParams() {
        long id = 123L;
        long sequenceNumber = 456L;
        String controlID = "ABC123";

        BreakIdentification bi = new BreakIdentification(id, sequenceNumber, controlID);

        assertEquals(id, bi.getId());
        assertEquals(sequenceNumber, bi.getSequenceNumber());
        assertEquals(controlID, bi.getControlID());
    }

    @Test
    public void testConstructorWithPartialParams() {
        long id = 123L;
        long sequenceNumber = 456L;

        BreakIdentification bi = new BreakIdentification(id, sequenceNumber);

        assertEquals(id, bi.getId());
        assertEquals(sequenceNumber, bi.getSequenceNumber());
        assertNull(bi.getControlID());
    }

    @Test
    public void testGettersAndSetters() {
        long id = 123L;
        long sequenceNumber = 456L;
        String controlID = "ABC123";

        BreakIdentification bi = new BreakIdentification(id, sequenceNumber);
        bi.setControlID(controlID);

        assertEquals(controlID, bi.getControlID());
    }

    @Test
    public void testEqualsWithSameValues() {
        BreakIdentification bi1 = new BreakIdentification(123L, 456L, "ABC123");
        BreakIdentification bi2 = new BreakIdentification(123L, 456L, "ABC123");

        assertEquals(bi1, bi2);
    }

    @Test
    public void testEqualsWithDifferentValues() {
        BreakIdentification bi1 = new BreakIdentification(123L, 456L, "ABC123");
        BreakIdentification bi2 = new BreakIdentification(124L, 457L, "XYZ789");

        assertNotEquals(bi1, bi2);
    }

    @Test
    public void testEqualsWithNullControlID() {
        BreakIdentification bi1 = new BreakIdentification(123L, 456L, null);
        BreakIdentification bi2 = new BreakIdentification(123L, 456L, null);

        assertEquals(bi1, bi2);
    }

    @Test
    public void testEqualsWithDifferentControlID() {
        BreakIdentification bi1 = new BreakIdentification(123L, 456L, null);
        BreakIdentification bi2 = new BreakIdentification(123L, 456L, "ABC123");

        assertNotEquals(bi1, bi2);
    }
}

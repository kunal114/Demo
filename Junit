import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class PortfolioInfoServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private PortfolioInfoServerProperties portfolioInfoServerProperties;

    @InjectMocks
    private PortfolioInfoService portfolioInfoService;

    @BeforeEach
    void setUp() {
        // Setup mock behavior for server properties
        when(portfolioInfoServerProperties.getPortfolioInfoUrl())
            .thenReturn("http://example.com/portfolio-info");
    }

    @Test
    void testGetPortfolioInfoData_SuccessfulResponse() throws IOException {
        // Arrange
        String expectedResponse = "{\"portfolio\": \"data\"}";
        ResponseEntity<String> mockResponse = new ResponseEntity<>(
            expectedResponse, 
            HttpStatus.OK
        );

        when(restTemplate.postForEntity(
            eq(portfolioInfoServerProperties.getPortfolioInfoUrl()), 
            isNull(), 
            eq(String.class)
        )).thenReturn(mockResponse);

        // Act
        String actualResponse = portfolioInfoService.getPortfolioInfoData();

        // Assert
        assertEquals(expectedResponse, actualResponse);
        verify(restTemplate).postForEntity(
            portfolioInfoServerProperties.getPortfolioInfoUrl(), 
            null, 
            String.class
        );
    }

    @Test
    void testGetPortfolioInfoData_NullResponse() throws IOException {
        // Arrange
        when(restTemplate.postForEntity(
            eq(portfolioInfoServerProperties.getPortfolioInfoUrl()), 
            isNull(), 
            eq(String.class)
        )).thenReturn(null);

        // Act
        String actualResponse = portfolioInfoService.getPortfolioInfoData();

        // Assert
        assertNull(actualResponse);
        verify(restTemplate).postForEntity(
            portfolioInfoServerProperties.getPortfolioInfoUrl(), 
            null, 
            String.class
        );
    }

    @Test
    void testGetPortfolioInfoData_ExceptionHandling() throws IOException {
        // Arrange
        when(restTemplate.postForEntity(
            eq(portfolioInfoServerProperties.getPortfolioInfoUrl()), 
            isNull(), 
            eq(String.class)
        )).thenThrow(new RuntimeException("Network error"));

        // Act & Assert
        assertNull(portfolioInfoService.getPortfolioInfoData());
    }
}

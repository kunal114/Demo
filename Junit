import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EntitledPortfoliosServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private PortfolioInfoServerProperties portfolioInfoServerProperties;

    @Mock
    private Logger logger;

    @InjectMocks
    private YourServiceClassName service;

    private static final String TEST_USER_ID = "user123";
    private static final String BASE_URL = "http://example.com/entitled-portfolios/";
    private static final int MAX_RETRIES = 3;

    @BeforeEach
    void setUp() {
        // Setup common mock behavior
        when(portfolioInfoServerProperties.getEntitledPortfoliosUrl())
            .thenReturn(BASE_URL);
    }

    @Test
    void testGetEntitledPortfolios_SuccessfulResponse() throws IOException {
        // Arrange
        String expectedResponse = "{\"portfolios\": [\"portfolio1\", \"portfolio2\"]}";
        String fullUrl = BASE_URL + TEST_USER_ID;

        ResponseEntity<String> mockResponse = new ResponseEntity<>(
            expectedResponse, 
            HttpStatus.OK
        );

        when(restTemplate.postForEntity(
            eq(fullUrl), 
            isNull(), 
            eq(String.class)
        )).thenReturn(mockResponse);

        // Act
        String actualResponse = service.getEntitledPortfolios(TEST_USER_ID, 0, MAX_RETRIES);

        // Assert
        assertEquals(expectedResponse, actualResponse);
        
        // Verify interactions
        verify(restTemplate).postForEntity(
            eq(fullUrl), 
            isNull(), 
            eq(String.class)
        );
        verify(logger).info(
            contains("Calling PBRepo FamilyEntitlementDAO API"),
            eq(fullUrl)
        );
    }

    @Test
    void testGetEntitledPortfolios_NullResponse() throws IOException {
        // Arrange
        String fullUrl = BASE_URL + TEST_USER_ID;

        when(restTemplate.postForEntity(
            eq(fullUrl), 
            isNull(), 
            eq(String.class)
        )).thenReturn(null);

        // Act
        String actualResponse = service.getEntitledPortfolios(TEST_USER_ID, 0, MAX_RETRIES);

        // Assert
        assertEquals("", actualResponse);
    }

    @Test
    void testGetEntitledPortfolios_RetryMechanism() throws IOException {
        // Arrange
        String fullUrl = BASE_URL + TEST_USER_ID;
        String expectedResponse = "{\"portfolios\": [\"portfolio1\"]}";

        // Simulate failure on first two attempts, success on third
        when(restTemplate.postForEntity(
            eq(fullUrl), 
            isNull(), 
            eq(String.class)
        )).thenThrow(new RuntimeException("First attempt failed"))
          .thenThrow(new RuntimeException("Second attempt failed"))
          .thenReturn(new ResponseEntity<>(expectedResponse, HttpStatus.OK));

        // Act
        String actualResponse = service.getEntitledPortfolios(TEST_USER_ID, 0, MAX_RETRIES);

        // Assert
        assertEquals(expectedResponse, actualResponse);
        
        // Verify retry logging
        verify(logger, times(2)).warn(
            contains("Failed to get entitled portfolios"),
            eq(TEST_USER_ID),
            anyInt(),
            eq(MAX_RETRIES),
            anyString()
        );
    }

    @Test
    void testGetEntitledPortfolios_ExceedMaxRetries() {
        // Arrange
        String fullUrl = BASE_URL + TEST_USER_ID;

        // Simulate consistent failure
        when(restTemplate.postForEntity(
            eq(fullUrl), 
            isNull(), 
            eq(String.class)
        )).thenThrow(new RuntimeException("Persistent failure"));

        // Act & Assert
        assertThrows(IOException.class, () -> {
            service.getEntitledPortfolios(TEST_USER_ID, 0, MAX_RETRIES);
        });

        // Verify retry attempts and final error logging
        verify(logger, times(MAX_RETRIES)).warn(
            contains("Failed to get entitled portfolios"),
            eq(TEST_USER_ID),
            anyInt(),
            eq(MAX_RETRIES),
            anyString()
        );
    }

    @Test
    void testGetEntitledPortfolios_NullUserId() {
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> {
            service.getEntitledPortfolios(null, 0, MAX_RETRIES);
        });
    }
}

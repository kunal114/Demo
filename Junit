To write a JUnit 5 test for the `TokenRefreshingDataSource` class, we need to focus on the `refreshTokenIfNeeded` method and its behavior. We will need to:

1. Mock dependencies like `EPVConfigVSI` and `AwardsDbPasswordFetch`.
2. Create a `TokenRefreshingDataSource` instance.
3. Simulate scenarios where the token needs to be refreshed.
4. Ensure that the token is refreshed correctly and exceptions are handled properly.

Below is the JUnit 5 test class for the `TokenRefreshingDataSource`:

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class TokenRefreshingDataSourceTest {

    @Mock
    private EPVConfigVSI epvConfigVSI;

    @Mock
    private AwardsDbPasswordFetch awsRdsDbPasswordFetch;

    @Mock
    private DriverManagerDataSource delegateDataSource;

    private TokenRefreshingDataSource tokenRefreshingDataSource;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);

        when(delegateDataSource.getUrl()).thenReturn("jdbc:mysql://localhost/test");
        when(delegateDataSource.getUsername()).thenReturn("testuser");
        when(delegateDataSource.getPassword()).thenReturn("testpass");
        Properties props = new Properties();
        props.setProperty("password", "testpass");
        when(delegateDataSource.getConnectionProperties()).thenReturn(props);

        tokenRefreshingDataSource = new TokenRefreshingDataSource(delegateDataSource, epvConfigVSI, awsRdsDbPasswordFetch);
    }

    @Test
    void testGetConnection() throws SQLException {
        // Mock connection
        Connection mockConnection = mock(Connection.class);
        when(delegateDataSource.getConnection()).thenReturn(mockConnection);

        // Act
        Connection connection = tokenRefreshingDataSource.getConnection();

        // Assert
        assertNotNull(connection);
        verify(delegateDataSource, times(1)).getConnection();
    }

    @Test
    void testRefreshTokenIfNeeded() throws Exception {
        // Simulate token refresh
        when(awsRdsDbPasswordFetch.getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean())).thenReturn("newToken");

        // Act - Simulate the passage of time to trigger token refresh
        ReflectionTestUtils.setField(tokenRefreshingDataSource, "lastRefreshTime", System.currentTimeMillis() - 850000);
        tokenRefreshingDataSource.getConnection();

        // Assert
        verify(awsRdsDbPasswordFetch, times(1)).getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean());
        Properties props = tokenRefreshingDataSource.getConnectionProperties();
        assertEquals("newToken", props.getProperty("password"));
    }

    @Test
    void testRefreshTokenIfNeeded_Failure() throws Exception {
        // Simulate token refresh failure
        when(awsRdsDbPasswordFetch.getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean()))
                .thenThrow(new RuntimeException("Token fetch failed"));

        // Act - Simulate the passage of time to trigger token refresh
        ReflectionTestUtils.setField(tokenRefreshingDataSource, "lastRefreshTime", System.currentTimeMillis() - 850000);

        SQLException exception = assertThrows(SQLException.class, () -> {
            tokenRefreshingDataSource.getConnection();
        });

        // Assert
        assertEquals("Failed to refresh database token", exception.getMessage());
    }
}
```

**Explanation:**

1. **Mock Setup**:
   - Mock the `EPVConfigVSI`, `AwardsDbPasswordFetch`, and `DriverManagerDataSource` using Mockito.
   - Initialize the `TokenRefreshingDataSource` with these mocks.

2. **Test `getConnection`**:
   - Verify that calling `getConnection` on `TokenRefreshingDataSource` delegates the call to the underlying `DriverManagerDataSource`.

3. **Test `refreshTokenIfNeeded`**:
   - Simulate a token refresh by setting `lastRefreshTime` to a time before the threshold.
   - Verify that the token is refreshed and the new token is set correctly in the properties.

4. **Test `refreshTokenIfNeeded` Failure**:
   - Simulate a failure in token refresh by throwing an exception when `getAuthToken` is called.
   - Ensure that a `SQLException` is thrown with the correct message.

This test setup ensures that all critical paths in the `TokenRefreshingDataSource` class are covered, including successful token refresh and handling of exceptions during token refresh.

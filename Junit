import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AccountInquiryServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private PortfolioInfoServerProperties portfolioInfoServerProperties;

    @InjectMocks
    private YourServiceClassName service;

    @Test
    void testGetAccountInquiryData() throws IOException {
        // Arrange
        Object request = new Object(); // Replace with actual request type
        String mockUrl = "http://example.com/account-inquiry";
        String expectedResponse = "Sample Response";

        // Configure mocks
        when(portfolioInfoServerProperties.getAccountInquiryUrl())
            .thenReturn(mockUrl);

        ResponseEntity<String> mockResponseEntity = 
            ResponseEntity.ok(expectedResponse);

        when(restTemplate.postForEntity(
            eq(mockUrl), 
            any(), 
            eq(String.class)
        )).thenReturn(mockResponseEntity);

        // Act
        String actualResponse = service.getAccountInquiryData(request);

        // Assert
        assertNotNull(actualResponse);
        assertEquals(expectedResponse, actualResponse);

        // Verify interactions
        verify(restTemplate).postForEntity(
            eq(mockUrl), 
            any(), 
            eq(String.class)
        );
    }

    @Test
    void testGetAccountInquiryData_NullResponse() throws IOException {
        // Arrange
        Object request = new Object(); // Replace with actual request type
        String mockUrl = "http://example.com/account-inquiry";

        when(portfolioInfoServerProperties.getAccountInquiryUrl())
            .thenReturn(mockUrl);

        when(restTemplate.postForEntity(
            eq(mockUrl), 
            any(), 
            eq(String.class)
        )).thenReturn(null);

        // Act
        String actualResponse = service.getAccountInquiryData(request);

        // Assert
        assertEquals("", actualResponse);
    }
}

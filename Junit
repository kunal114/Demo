import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RestTemplateFactoryTest {

    @InjectMocks
    private RestTemplateFactory restTemplateFactory;

    @Mock
    private SecureCredentialConfig secureCredentialConfig;

    @BeforeEach
    void setUp() {
        ReflectionTestUtils.setField(restTemplateFactory, "keyStorePath", "path/to/keystore.jks");
    }

    @Test
    void testGetRestTemplate_Success() {
        // Arrange
        when(secureCredentialConfig.getKeystorePassword()).thenReturn("password");

        // Act
        RestTemplate restTemplate = restTemplateFactory.getRestTemplate();

        // Assert
        assertNotNull(restTemplate);
        assertTrue(restTemplate.getMessageConverters().stream()
                .anyMatch(converter -> converter instanceof MappingJackson2HttpMessageConverter));
    }

    @Test
    void testGetRestTemplate_Exception() {
        // Arrange
        when(secureCredentialConfig.getKeystorePassword()).thenReturn("invalidPassword");

        // Act
        RestTemplate restTemplate = restTemplateFactory.getRestTemplate();

        // Assert
        assertNull(restTemplate);
    }
}

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import java.io.IOException;
import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class EmulationFilterTest {

    @Mock
    private FilterChain filterChain;

    private EmulationFilter emulationFilter;

    @BeforeEach
    public void setUp() {
        emulationFilter = new EmulationFilter();
    }

    @Test
    public void testDoFilterInternal_EmulationModeActive() throws ServletException, IOException, ReflectiveOperationException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();

        Cookie emulationCookie = new Cookie(EmulationConstants.REQUEST_COOKIE_FOR_EMULATION_MODE, "true");
        Cookie emulatorJanusIdCookie = new Cookie(EmulationConstants.REQUEST_COOKIE_FOR_EMULATOR_JANUS_USER_ID, "emulatorJanusId");
        Cookie emulatorKopsIdCookie = new Cookie(EmulationConstants.REQUEST_COOKIE_FOR_EMULATOR_JANUS_KOPS_ID, "emulatorKopsId");
        Cookie emulateeJanusIdCookie = new Cookie(EmulationConstants.REQUEST_COOKIE_FOR_EMULATEE_JANUS_USER_ID, "emulateeJanusId");
        Cookie emulateeKopsIdCookie = new Cookie(EmulationConstants.REQUEST_COOKIE_FOR_EMULATEE_JANUS_KOPS_ID, "emulateeKopsId");

        request.setCookies(emulationCookie, emulatorJanusIdCookie, emulatorKopsIdCookie, emulateeJanusIdCookie, emulateeKopsIdCookie);

        Method doFilterInternalMethod = EmulationFilter.class.getDeclaredMethod("doFilterInternal", HttpServletRequest.class, HttpServletResponse.class, FilterChain.class);
        doFilterInternalMethod.setAccessible(true);
        doFilterInternalMethod.invoke(emulationFilter, request, response, filterChain);

        assertEquals("true", request.getSession().getAttribute(EmulationConstants.REQUEST_HEADER_IN_EMULATION_MODE));
        assertEquals("emulatorJanusId", request.getSession().getAttribute(EmulationConstants.REQUEST_HEADER_EMULATOR_JANUS_USER_ID));
        assertEquals("emulatorKopsId", request.getSession().getAttribute(EmulationConstants.REQUEST_HEADER_EMULATOR_JANUS_KOPS_ID));
        assertEquals("emulateeJanusId", request.getSession().getAttribute(EmulationConstants.REQUEST_HEADER_EMULATEE_JANUS_USER_ID));
        assertEquals("emulateeKopsId", request.getSession().getAttribute(EmulationConstants.REQUEST_HEADER_EMULATEE_JANUS_KOPS_ID));
        assertEquals("emulateeKopsId", request.getSession().getAttribute(EmulationConstants.REQUEST_HEADER_JANUS_KOPS_ID));

        verify(filterChain, times(1)).doFilter(request, response);
    }

    @Test
    public void testDoFilterInternal_EmulationModeInactive() throws ServletException, IOException, ReflectiveOperationException {
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();

        Method doFilterInternalMethod = EmulationFilter.class.getDeclaredMethod("doFilterInternal", HttpServletRequest.class, HttpServletResponse.class, FilterChain.class);
        doFilterInternalMethod.setAccessible(true);
        doFilterInternalMethod.invoke(emulationFilter, request, response, filterChain);

        verify(filterChain, times(1)).doFilter(request, response);
    }
}

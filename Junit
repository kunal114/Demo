import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.http.HttpEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AccountInquiryServiceExceptionTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private PortfolioInfoServerProperties portfolioInfoServerProperties;

    @Mock
    private Logger logger;

    @InjectMocks
    private YourServiceClassName service;

    @Test
    void testGetAccountInquiryData_RestClientException() throws IOException {
        // Arrange
        RestRequestInput request = new RestRequestInput(); // Replace with actual request object
        String mockUrl = "http://example.com/account-inquiry";

        // Setup mock URL
        when(portfolioInfoServerProperties.getAccountInquiryUrl())
            .thenReturn(mockUrl);

        // Simulate RestClientException
        when(restTemplate.postForEntity(
            eq(mockUrl), 
            any(HttpEntity.class), 
            eq(String.class)
        )).thenThrow(new RestClientException("Connection failed"));

        // Act
        String result = service.getAccountInquiryData(request);

        // Assert
        assertEquals("", result);

        // Verify logging
        verify(logger).error(
            contains("AccountInquiryUrl"), 
            eq(mockUrl), 
            any(RestClientException.class)
        );
    }

    @Test
    void testGetAccountInquiryData_GenericException() throws IOException {
        // Arrange
        RestRequestInput request = new RestRequestInput(); // Replace with actual request object
        String mockUrl = "http://example.com/account-inquiry";

        // Setup mock URL
        when(portfolioInfoServerProperties.getAccountInquiryUrl())
            .thenReturn(mockUrl);

        // Simulate generic Exception
        when(restTemplate.postForEntity(
            eq(mockUrl), 
            any(HttpEntity.class), 
            eq(String.class)
        )).thenThrow(new RuntimeException("Unexpected error"));

        // Act
        String result = service.getAccountInquiryData(request);

        // Assert
        assertEquals("", result);

        // Verify logging
        verify(logger).error(
            contains("AccountInquiryUrl"), 
            eq(mockUrl), 
            any(RuntimeException.class)
        );
    }

    @Test
    void testGetAccountInquiryData_NetworkTimeout() throws IOException {
        // Arrange
        RestRequestInput request = new RestRequestInput(); // Replace with actual request object
        String mockUrl = "http://example.com/account-inquiry";

        // Setup mock URL
        when(portfolioInfoServerProperties.getAccountInquiryUrl())
            .thenReturn(mockUrl);

        // Simulate network timeout scenario
        when(restTemplate.postForEntity(
            eq(mockUrl), 
            any(HttpEntity.class), 
            eq(String.class)
        )).thenThrow(new RestClientException("Connect timeout"));

        // Act
        String result = service.getAccountInquiryData(request);

        // Assert
        assertEquals("", result);

        // Verify logging
        verify(logger).error(
            contains("AccountInquiryUrl"), 
            eq(mockUrl), 
            any(RestClientException.class)
        );
    }
}

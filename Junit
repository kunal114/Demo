To address the failure in refreshing the database token, we need to ensure that the mock setup and the context are correctly aligned. Here's an updated version of the test to ensure that all aspects, including the token refresh logic, are correctly handled.

```java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

class DataSourceConfigTest {

    private EPVConfigVSI epvConfigVSI;
    private AwardsDbPasswordFetch awsRdsDbPasswordFetch;
    private DriverManagerDataSource delegate;
    private DataSourceConfig.TokenRefreshingDataSource dataSource;

    @BeforeEach
    void setUp() {
        epvConfigVSI = mock(EPVConfigVSI.class);
        awsRdsDbPasswordFetch = mock(AwardsDbPasswordFetch.class);
        delegate = mock(DriverManagerDataSource.class);
        dataSource = new DataSourceConfig().new TokenRefreshingDataSource(delegate, epvConfigVSI, awsRdsDbPasswordFetch);
    }

    @Test
    void testAwsRdsAuroraMySqlDataSource_WithDbAuthToken() throws Exception {
        // Setup
        when(awsRdsDbPasswordFetch.getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean()))
                .thenReturn("token");

        DataSourceConfig config = new DataSourceConfig();

        ReflectionTestUtils.setField(config, "dataSourceUrl", "testuri");
        ReflectionTestUtils.setField(config, "dataSourceUserName", "testuser");
        ReflectionTestUtils.setField(config, "dataSourceDriverClassName", "software.aws.rds.jdbc.mysql.Driver");

        // Action
        DataSource dataSource = config.awsRdsAuroraMySqlDataSource(epvConfigVSI, awsRdsDbPasswordFetch);

        // Assert
        assertNotNull(dataSource);
        assertTrue(dataSource instanceof DataSourceConfig.TokenRefreshingDataSource);

        Properties connectionProps = (Properties) ReflectionTestUtils.getField(dataSource, "connectionProperties");
        assertEquals("token", connectionProps.getProperty("password"));
    }

    @Test
    void testAwsRdsAuroraMySqlDataSource_WithDbAuthTokenne() throws Exception {
        // Setup
        when(awsRdsDbPasswordFetch.getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean()))
                .thenReturn(null);

        DataSourceConfig config = new DataSourceConfig();

        ReflectionTestUtils.setField(config, "dataSourceUrl", "testuri");
        ReflectionTestUtils.setField(config, "dataSourceUserName", "testuser");
        ReflectionTestUtils.setField(config, "dataSourceDriverClassName", "software.aws.rds.jdbc.mysql.Driver");

        // Action
        DataSource dataSource = config.awsRdsAuroraMySqlDataSource(epvConfigVSI, awsRdsDbPasswordFetch);

        // Assert
        assertNotNull(dataSource);
        assertTrue(dataSource instanceof DataSourceConfig.TokenRefreshingDataSource);

        Properties connectionProps = (Properties) ReflectionTestUtils.getField(dataSource, "connectionProperties");
        assertNull(connectionProps.getProperty("password"));
    }

    @Test
    void testTokenRefreshingDataSource_RefreshTokenIfNeeded() throws Exception {
        // Setup
        when(awsRdsDbPasswordFetch.getAuthToken(any(), any(), anyInt(), any(), any(), any(), any(), any(), any(), anyBoolean()))
                .thenReturn("newToken");

        // Mocking getConnection from delegate to return a mock connection
        Connection mockConnection = mock(Connection.class);
        when(delegate.getConnection()).thenReturn(mockConnection);

        // Set last refresh time to a past time to force refresh
        ReflectionTestUtils.setField(dataSource, "lastRefreshTime", System.currentTimeMillis() - 900000); // 15 minutes ago

        // Action
        Connection connection = dataSource.getConnection();

        // Assert
        assertNotNull(connection);
        verify(delegate, times(1)).getConnection(); // Ensure that the delegate's getConnection was called

        Properties connectionProps = (Properties) ReflectionTestUtils.getField(dataSource, "connectionProperties");
        assertEquals("newToken", connectionProps.getProperty("password"));
    }
}
```

**Changes Made:**

1. **Setup Method**:
   - Added a `@BeforeEach` setup method to initialize the mocks and the `TokenRefreshingDataSource`.

2. **Mock Connection**:
   - Mocked the `Connection` object and configured the `delegate` data source to return this mock connection when `getConnection` is called.

3. **Token Refresh Test**:
   - Ensured that the `awsRdsDbPasswordFetch.getAuthToken` method returns a new token.
   - Verified that the delegate's `getConnection` method was called.
   - Checked that the `password` property in the `connectionProperties` was updated to the new token.

This should address the token refresh functionality and ensure that the test covers the `refreshTokenIfNeeded` method correctly.

@Test
    void testDoFilterInternal_ServletException() throws IOException {
        byte[] cachedFileBytes = new byte[0];
        ByteArrayInputStream bais = new ByteArrayInputStream(cachedFileBytes);
        when(request.getInputStream()).thenReturn(new DelegatingServletInputStream(bais));

        ServletException servletException = new ServletException("Simulated ServletException");
        doThrow(servletException).when(filterChain).doFilter(any(), any());

        assertThrows(ServletException.class, () -> {
            fileUploadFilter.doFilterInternal(request, response, filterChain);
        });

        verify(log).error(eq("Error while uploading request"), eq(servletException));
    }

    // A utility class to wrap ByteArrayInputStream as ServletInputStream
    static class DelegatingServletInputStream extends ServletInputStream {
        private final ByteArrayInputStream bais;

        public DelegatingServletInputStream(ByteArrayInputStream bais) {
            this.bais = bais;
        }

        @Override
        public int read() throws IOException {
            return bais.read();
        }

        @Override
        public boolean isFinished() {
            return bais.available() == 0;
        }

        @Override
        public boolean isReady() {
            return true;
        }

        @Override
        public void setReadListener(jakarta.servlet.ReadListener readListener) {
            throw new UnsupportedOperationException();
        }
    }

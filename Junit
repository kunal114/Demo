import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.Test;
import com.bear.trs.client.api.ServiceFaultException;

public class ServiceFaultHelperTest {

    private static final String AUTHENTICATION_ERROR = "CLIENT.AUTHENTICATION";

    @Test
    public void testHasAuthenticationErrorWithAuthenticationError() {
        // Setup
        ServiceFaultException exception = mock(ServiceFaultException.class);
        when(exception.getFaultcode()).thenReturn("CLIENT.AUTHENTICATION.SOME_REASON");

        // Test
        boolean result = ServiceFaultHelper.hasAuthenticationError(exception);

        // Assertion
        assertTrue(result, "Expected authentication error to be detected.");
    }

    @Test
    public void testHasAuthenticationErrorWithoutAuthenticationError() {
        // Setup
        ServiceFaultException exception = mock(ServiceFaultException.class);
        when(exception.getFaultcode()).thenReturn("CLIENT.OTHER_ERROR");

        // Test
        boolean result = ServiceFaultHelper.hasAuthenticationError(exception);

        // Assertion
        assertFalse(result, "Expected no authentication error to be detected.");
    }

    @Test
    public void testHasAuthenticationErrorWithNullFaultCode() {
        // Setup
        ServiceFaultException exception = mock(ServiceFaultException.class);
        when(exception.getFaultcode()).thenReturn(null);

        // Test
        boolean result = ServiceFaultHelper.hasAuthenticationError(exception);

        // Assertion
        assertFalse(result, "Expected no authentication error to be detected when fault code is null.");
    }

    @Test
    public void testHasAuthenticationErrorWithNonServiceFaultException() {
        // Test
        boolean result = ServiceFaultHelper.hasAuthenticationError(new Exception());

        // Assertion
        assertFalse(result, "Expected no authentication error to be detected when not a ServiceFaultException.");
    }

    @Test
    public void testGetMessageWithValidException() {
        // Setup
        ServiceFaultException exception = mock(ServiceFaultException.class);
        when(exception.getFaultstring()).thenReturn("An error occurred");

        // Test
        String result = ServiceFaultHelper.getMessage(exception);

        // Assertion
        assertEquals("An error occurred", result, "Expected faultstring to be returned.");
    }

    @Test
    public void testGetMessageWithNullException() {
        // Test
        String result = ServiceFaultHelper.getMessage(null);

        // Assertion
        assertNull(result, "Expected null when exception is null.");
    }

    @Test
    public void testGetMessageWithNonServiceFaultException() {
        // Test
        String result = ServiceFaultHelper.getMessage(new Exception());

        // Assertion
        assertNull(result, "Expected null when not a ServiceFaultException.");
    }
}

import unittest
import json
from unittest.mock import patch, MagicMock
import boto3

# Import your lambda function module
import lambda_function as your_module

class TestLambdaHandler(unittest.TestCase):
    def setUp(self):
        # Setup common test data
        self.secret_arn = 'arn:aws:secretsmanager:us-east-1:123456789012:secret:test-secret'
        self.request_token = 'test-request-token'
        self.test_password = 'new-test-password'

    @patch('boto3.client')
    def test_lambda_handler_create_secret_step(self, mock_boto3_client):
        # Setup mock Secrets Manager client
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # Configure mock for describe_secret
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': True,
            'VersionIdsToStages': {
                self.request_token: ['AWSPENDING']
            }
        }

        # Configure mock for get_secret_value
        mock_secrets_client.get_secret_value.return_value = {
            'SecretString': json.dumps({
                'username': 'testuser', 
                'password': 'oldpassword'
            })
        }

        # Configure mock for get_random_password
        mock_secrets_client.get_random_password.return_value = {
            'RandomPassword': self.test_password
        }

        # Create event for create secret step
        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'createSecret',
            'Password': self.test_password
        }

        # Call lambda_handler
        try:
            result = your_module.lambda_handler(event, None)
            # Successful execution should return None
            self.assertIsNone(result)
        except Exception as e:
            self.fail(f"lambda_handler raised unexpected exception: {e}")

    @patch('boto3.client')
    def test_lambda_handler_update_secret_step(self, mock_boto3_client):
        # Setup mock Secrets Manager client
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # Configure mock for describe_secret (optional, depending on your implementation)
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': True,
            'VersionIdsToStages': {
                self.request_token: ['AWSPENDING']
            }
        }

        # Configure mock for get_secret_value
        mock_secrets_client.get_secret_value.return_value = {
            'SecretString': json.dumps({
                'username': 'testuser', 
                'password': 'oldpassword'
            })
        }

        # Create event for update secret step
        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'updateSecret',
            'Password': self.test_password
        }

        # Call lambda_handler
        try:
            result = your_module.lambda_handler(event, None)
            # Successful execution should return None
            self.assertIsNone(result)
        except Exception as e:
            self.fail(f"lambda_handler raised unexpected exception: {e}")

    @patch('boto3.client')
    def test_lambda_handler_finish_secret_step(self, mock_boto3_client):
        # Setup mock Secrets Manager client
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # Configure mock for describe_secret
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': True,
            'VersionIdsToStages': {
                'old-version': ['AWSCURRENT'],
                self.request_token: ['AWSPENDING']
            }
        }

        # Create event for finish secret step
        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'finishSecret'
        }

        # Call lambda_handler
        try:
            result = your_module.lambda_handler(event, None)
            # Successful execution should return None
            self.assertIsNone(result)
        except Exception as e:
            self.fail(f"lambda_handler raised unexpected exception: {e}")

    @patch('boto3.client')
    def test_lambda_handler_rotation_disabled(self, mock_boto3_client):
        # Setup mock Secrets Manager client
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # Configure mock to return rotation as disabled
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': False
        }

        # Create event
        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'createSecret'
        }

        # Expect ValueError for disabled rotation
        with self.assertRaises(ValueError) as context:
            your_module.lambda_handler(event, None)
        
        self.assertTrue('not enabled for rotation' in str(context.exception))

    def test_lambda_handler_missing_parameters(self):
        # Test scenarios with missing required parameters
        test_cases = [
            {},  # Empty event
            {'SecretId': self.secret_arn},  # Missing ClientRequestToken
            {'ClientRequestToken': self.request_token}  # Missing SecretId
        ]

        for event in test_cases:
            with self.assertRaises(KeyError, msg=f"Failed for event: {event}"):
                your_module.lambda_handler(event, None)

    @patch('boto3.client')
    def test_lambda_handler_invalid_step(self, mock_boto3_client):
        # Setup mock Secrets Manager client
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # Configure mock for describe_secret
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': True
        }

        # Create event with invalid step
        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'invalidStep'
        }

        # Expect ValueError for invalid step
        with self.assertRaises(ValueError) as context:
            your_module.lambda_handler(event, None)
        
        self.assertTrue('Invalid request step parameter' in str(context.exception))

if __name__ == '__main__':
    unittest.main(verbosity=2)

import unittest
from unittest.mock import patch, MagicMock
import json
import base64
import boto3
import sys
import os

# Add the directory containing your module to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Dynamically import the module (replace with your actual module name)
try:
    import lambda_function as your_module  # Adjust this to match your actual module name
except ImportError as e:
    print(f"Import error: {e}")
    print("Current sys.path:", sys.path)
    raise

class TestSecretRotationLambdaHandler(unittest.TestCase):
    def setUp(self):
        # Setup mock data and configurations
        self.secret_arn = 'arn:aws:secretsmanager:us-east-1:123456789012:secret:test-secret'
        self.request_token = 'test-request-token'
        self.test_password = 'new-test-password'

    @patch('boto3.client')
    def test_lambda_handler_rotation_not_enabled(self, mock_boto3_client):
        # Modify to handle potential missing attributes
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # Configure mock to return rotation not enabled
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': False
        }

        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'createSecret'
        }

        with self.assertRaises(ValueError) as context:
            your_module.lambda_handler(event, None)

        self.assertTrue('not enabled for rotation' in str(context.exception))

    @patch('boto3.client')
    def test_lambda_handler_create_secret(self, mock_boto3_client):
        # More robust test for create secret
        mock_secrets_client = MagicMock()
        mock_boto3_client.return_value = mock_secrets_client

        # More flexible mock setup
        mock_secrets_client.describe_secret.return_value = {
            'RotationEnabled': True,
            'VersionIdsToStages': {self.request_token: ['AWSPENDING']}
        }
        mock_secrets_client.get_secret_value.side_effect = [
            {'SecretString': json.dumps({'username': 'testuser', 'password': 'oldpassword'})},
            # Simulating ResourceNotFoundException
            Exception('ResourceNotFound')
        ]
        mock_secrets_client.get_random_password.return_value = {
            'RandomPassword': self.test_password
        }

        event = {
            'SecretId': self.secret_arn,
            'ClientRequestToken': self.request_token,
            'Step': 'createSecret',
            'Password': self.test_password
        }

        try:
            result = your_module.lambda_handler(event, None)
            # If no exception is raised, the test passes
            self.assertIsNone(result)
        except Exception as e:
            self.fail(f"lambda_handler raised an unexpected exception: {e}")

    def test_execute_step(self):
        # More flexible step execution test
        mock_client = MagicMock()
        
        # Test supported steps
        steps = ['createSecret', 'setSecret', 'testSecret', 'finishSecret', 'updateSecret']
        
        for step in steps:
            try:
                your_module.execute_step(
                    step, 
                    mock_client, 
                    self.secret_arn, 
                    self.request_token, 
                    self.test_password
                )
            except Exception as e:
                self.fail(f"Step {step} failed unexpectedly: {e}")

    def test_invalid_step(self):
        # Specific test for invalid step
        mock_client = MagicMock()

        with self.assertRaises(ValueError):
            your_module.execute_step(
                'invalidStep', 
                mock_client, 
                self.secret_arn, 
                self.request_token, 
                self.test_password
            )

# Debugging print to show import and module details
def print_module_info():
    print("Module Name:", your_module.__name__)
    print("Module File:", your_module.__file__)
    print("Module Dict Keys:", list(your_module.__dict__.keys()))

if __name__ == '__main__':
    print_module_info()
    unittest.main()

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.*;

class RequestWrapperFilterTest {

    private RequestWrapperFilter filter;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private ServletRequest servletRequest;

    @Mock
    private ServletResponse servletResponse;

    @Mock
    private FilterChain filterChain;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        filter = new RequestWrapperFilter();
    }

    @Test
    void testDoFilter_withHttpServletRequest() throws IOException, ServletException {
        // Given: HttpServletRequest instance
        when(servletRequest instanceof HttpServletRequest).thenReturn(true);
        when((HttpServletRequest) servletRequest).thenReturn(httpServletRequest);

        // When: doFilter is called
        filter.doFilter(servletRequest, servletResponse, filterChain);

        // Then: CookieModifierRequest should be passed to the filter chain
        ArgumentCaptor<ServletRequest> requestCaptor = ArgumentCaptor.forClass(ServletRequest.class);
        verify(filterChain).doFilter(requestCaptor.capture(), eq(servletResponse));

        assertTrue(requestCaptor.getValue() instanceof CookieModifierRequest);
    }

    @Test
    void testDoFilter_withoutHttpServletRequest() throws IOException, ServletException {
        // Given: Non-HttpServletRequest instance
        when(servletRequest instanceof HttpServletRequest).thenReturn(false);

        // When: doFilter is called
        filter.doFilter(servletRequest, servletResponse, filterChain);

        // Then: Original ServletRequest should be passed to the filter chain
        verify(filterChain).doFilter(servletRequest, servletResponse);
    }
}

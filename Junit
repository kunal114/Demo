import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class TokenRefreshingDataSourceTest {

    @Mock
    private DriverManagerDataSource mockDelegate;
    @Mock
    private EPVConfigVSI mockEpvConfigVSI;
    @Mock
    private AwardsDbPasswordFetch mockAwsRdsDbPasswordFetch;
    @Mock
    private Connection mockConnection;

    private TokenRefreshingDataSource tokenRefreshingDataSource;

    @BeforeEach
    void setUp() {
        tokenRefreshingDataSource = new TokenRefreshingDataSource(mockDelegate, mockEpvConfigVSI, mockAwsRdsDbPasswordFetch);
    }

    @Test
    void getConnection_shouldRefreshTokenAndReturnConnection() throws Exception {
        // Arrange
        when(mockDelegate.getConnection()).thenReturn(mockConnection);
        when(mockEpvConfigVSI.retrieveEpvPasswordForAwsRds()).thenReturn("fidpss");
        when(mockAwsRdsDbPasswordFetch.getAuthToken(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean(), anyBoolean()))
                .thenReturn("newToken");

        // Act
        Connection result = tokenRefreshingDataSource.getConnection();

        // Assert
        assertThat(result).isEqualTo(mockConnection);
        verify(mockDelegate).setPassword("newToken");
        verify(mockDelegate).getConnection();
    }

    @Test
    void getConnection_shouldThrowSQLExceptionWhenTokenRefreshFails() throws Exception {
        // Arrange
        when(mockEpvConfigVSI.retrieveEpvPasswordForAwsRds()).thenThrow(new RuntimeException("Token fetch failed"));

        // Act & Assert
        assertThatThrownBy(() -> tokenRefreshingDataSource.getConnection())
                .isInstanceOf(SQLException.class)
                .hasMessageContaining("Failed to refresh database token");
    }

    @Test
    void getConnection_shouldNotRefreshTokenIfNotExpired() throws Exception {
        // Arrange
        when(mockDelegate.getConnection()).thenReturn(mockConnection);

        // Act
        Connection result1 = tokenRefreshingDataSource.getConnection();
        Connection result2 = tokenRefreshingDataSource.getConnection();

        // Assert
        assertThat(result1).isEqualTo(mockConnection);
        assertThat(result2).isEqualTo(mockConnection);
        verify(mockEpvConfigVSI, times(1)).retrieveEpvPasswordForAwsRds();
        verify(mockDelegate, times(2)).getConnection();
    }

    @Test
    void getConnection_withCredentials_shouldRefreshTokenAndReturnConnection() throws Exception {
        // Arrange
        when(mockDelegate.getConnection(anyString(), anyString())).thenReturn(mockConnection);
        when(mockEpvConfigVSI.retrieveEpvPasswordForAwsRds()).thenReturn("fidpss");
        when(mockAwsRdsDbPasswordFetch.getAuthToken(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean(), anyBoolean()))
                .thenReturn("newToken");

        // Act
        Connection result = tokenRefreshingDataSource.getConnection("username", "password");

        // Assert
        assertThat(result).isEqualTo(mockConnection);
        verify(mockDelegate).setPassword("newToken");
        verify(mockDelegate).getConnection("username", "password");
    }

    @Test
    void refreshToken_shouldUpdateConnectionProperties() throws Exception {
        // Arrange
        Properties props = new Properties();
        when(mockDelegate.getConnectionProperties()).thenReturn(props);
        when(mockEpvConfigVSI.retrieveEpvPasswordForAwsRds()).thenReturn("fidpss");
        when(mockAwsRdsDbPasswordFetch.getAuthToken(anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyBoolean(), anyBoolean()))
                .thenReturn("newToken");

        // Act
        tokenRefreshingDataSource.getConnection();

        // Assert
        assertThat(props).containsEntry("password", "newToken");
        verify(mockDelegate).setConnectionProperties(props);
    }
}

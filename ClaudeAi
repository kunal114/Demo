// Step 1: Define the adapter interface
package com.example.mapper;

public interface ModelAdapter<S, T> {
    // Source type this adapter handles
    Class<S> getSourceType();
    
    // Target type this adapter converts to
    Class<T> getTargetType();
    
    // Conversion method
    T convert(S source);
}

// Step 2: Create a mapper registry
package com.example.mapper;

import org.springframework.stereotype.Service;
import java.util.HashMap;
import java.util.Map;

@Service
public class ModelMapperRegistry {
    private final Map<TypePair, ModelAdapter<?, ?>> adapterMap = new HashMap<>();
    
    // Simple class to hold source and target types
    private static class TypePair {
        private final Class<?> sourceType;
        private final Class<?> targetType;
        
        public TypePair(Class<?> sourceType, Class<?> targetType) {
            this.sourceType = sourceType;
            this.targetType = targetType;
        }
        
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            TypePair typePair = (TypePair) o;
            return sourceType.equals(typePair.sourceType) && targetType.equals(typePair.targetType);
        }
        
        @Override
        public int hashCode() {
            return 31 * sourceType.hashCode() + targetType.hashCode();
        }
    }
    
    @SuppressWarnings("unchecked")
    public <S, T> T map(S source, Class<T> targetType) {
        if (source == null) {
            return null;
        }
        
        TypePair typePair = new TypePair(source.getClass(), targetType);
        ModelAdapter<S, T> adapter = (ModelAdapter<S, T>) adapterMap.get(typePair);
        
        if (adapter == null) {
            throw new RuntimeException("No adapter found for converting " + 
                source.getClass().getName() + " to " + targetType.getName());
        }
        
        return adapter.convert(source);
    }
    
    public void registerAdapter(ModelAdapter<?, ?> adapter) {
        TypePair typePair = new TypePair(adapter.getSourceType(), adapter.getTargetType());
        adapterMap.put(typePair, adapter);
    }
}

// Step 3: Create an auto-discovery mechanism
package com.example.mapper;

import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import java.util.Map;

@Component
public class ModelAdapterDiscovery implements ApplicationListener<ContextRefreshedEvent> {
    private final ModelMapperRegistry registry;
    
    public ModelAdapterDiscovery(ModelMapperRegistry registry) {
        this.registry = registry;
    }
    
    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        ApplicationContext context = event.getApplicationContext();
        Map<String, ModelAdapter> adapters = context.getBeansOfType(ModelAdapter.class);
        
        // Using for-loop instead of lambda
        for (ModelAdapter adapter : adapters.values()) {
            registry.registerAdapter(adapter);
        }
    }
}

// Step 4: Create a facade for easy usage
package com.example.mapper;

import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class ModelMapper {
    private final ModelMapperRegistry registry;
    
    public ModelMapper(ModelMapperRegistry registry) {
        this.registry = registry;
    }
    
    public <S, T> T map(S source, Class<T> targetType) {
        return registry.map(source, targetType);
    }
    
    public <S, T> List<T> mapList(List<S> sources, Class<T> targetType) {
        if (sources == null) {
            return Collections.emptyList();
        }
        
        // Using for-loop instead of stream
        List<T> result = new ArrayList<>(sources.size());
        for (S source : sources) {
            result.add(map(source, targetType));
        }
        return result;
    }
    
    public <S, T> List<T> mapListParallel(List<S> sources, Class<T> targetType) {
        if (sources == null) {
            return Collections.emptyList();
        }
        
        // Using for-loop with a synchronized list for parallel processing
        List<T> result = Collections.synchronizedList(new ArrayList<>(sources.size()));
        
        // We'll use a simple ThreadPoolExecutor to handle parallelism
        // In a real application, you might want to use Spring's TaskExecutor
        int processors = Runtime.getRuntime().availableProcessors();
        List<Thread> threads = new ArrayList<>(processors);
        
        int chunkSize = Math.max(1, sources.size() / processors);
        
        for (int t = 0; t < processors; t++) {
            final int threadIndex = t;
            Thread thread = new Thread(() -> {
                int start = threadIndex * chunkSize;
                int end = (threadIndex == processors - 1) ? sources.size() : (threadIndex + 1) * chunkSize;
                
                for (int i = start; i < end && i < sources.size(); i++) {
                    result.add(map(sources.get(i), targetType));
                }
            });
            threads.add(thread);
            thread.start();
        }
        
        // Wait for all threads to complete
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new RuntimeException("Interrupted during parallel mapping", e);
            }
        }
        
        return result;
    }
}

// Step 5: Example adapter implementation
package com.example.adapters;

import org.springframework.stereotype.Component;
import com.example.mapper.ModelAdapter;
import com.example.dto.SourceSystemADto;
import com.example.model.StandardModel;

@Component
public class SourceSystemAToModelAdapter implements ModelAdapter<SourceSystemADto, StandardModel> {
    @Override
    public Class<SourceSystemADto> getSourceType() {
        return SourceSystemADto.class;
    }
    
    @Override
    public Class<StandardModel> getTargetType() {
        return StandardModel.class;
    }
    
    @Override
    public StandardModel convert(SourceSystemADto source) {
        StandardModel target = new StandardModel();
        // Mapping logic here
        target.setId(source.getId());
        target.setName(source.getName());
        // Additional mapping as needed
        return target;
    }
}

// Step 6: Add caching with Spring Boot's built-in caching
package com.example.config;

import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Configuration;
import org.springframework.cache.CacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.context.annotation.Bean;

@Configuration
@EnableCaching
public class CacheConfig {
    @Bean
    public CacheManager cacheManager() {
        return new ConcurrentMapCacheManager("modelMapperCache");
    }
}

// Update the ModelMapper to use caching
package com.example.mapper;

import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Service
public class CachedModelMapper {
    private final ModelMapperRegistry registry;
    
    public CachedModelMapper(ModelMapperRegistry registry) {
        this.registry = registry;
    }
    
    @Cacheable(value = "modelMapperCache", key = "#source.hashCode() + '-' + #targetType.getName()")
    public <S, T> T map(S source, Class<T> targetType) {
        return registry.map(source, targetType);
    }
    
    // Other methods would be similar to the regular ModelMapper
}

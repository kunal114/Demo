import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;
import java.security.KeyStore;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RestTemplateFactoryTest {

    @Mock
    private KeyStore mockKeyStore;

    @Mock
    private SSLContext mockSslContext;

    private RestTemplateFactory restTemplateFactory;

    @BeforeEach
    void setUp() {
        restTemplateFactory = new RestTemplateFactory();
        ReflectionTestUtils.setField(restTemplateFactory, "keystorePath", 
            RestTemplateFactoryTest.class.getClassLoader().getResource("test-keystore.jks").getPath());
    }

    @Test
    void testGetRestTemplate() throws Exception {
        try (MockedStatic<KeyStore> mockedKeyStore = mockStatic(KeyStore.class)) {
            mockedKeyStore.when(() -> KeyStore.getInstance(anyString())).thenReturn(mockKeyStore);

            when(restTemplateFactory.getKeystorePassword()).thenReturn("change");

            mockStatic(SSLContextBuilder.class);
            SSLContextBuilder mockBuilder = mock(SSLContextBuilder.class);
            when(SSLContextBuilder.create()).thenReturn(mockBuilder);
            when(mockBuilder.useProtocol(anyString())).thenReturn(mockBuilder);
            when(mockBuilder.loadTrustMaterial(any(KeyStore.class), any(TrustSelfSignedStrategy.class))).thenReturn(mockBuilder);
            when(mockBuilder.build()).thenReturn(mockSslContext);

            mockConstruction(SSLConnectionSocketFactory.class);

            RestTemplate restTemplate = restTemplateFactory.getRestTemplate();

            assertNotNull(restTemplate);
        }
    }
}

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class RejectedTradeTest {

    @Test
    void testDefaultConstructor() {
        RejectedTrade rejectedTrade = new RejectedTrade();
        assertNull(rejectedTrade.getTradeID());
        assertNull(rejectedTrade.getRejectCode());
        assertNull(rejectedTrade.getMessageText());
    }

    @Test
    void testParameterizedConstructor() {
        TradeIdentification tradeID = new TradeIdentification(); // Assume a default constructor
        String rejectCode = "RC123";
        String messageText = "Trade rejected";

        RejectedTrade rejectedTrade = new RejectedTrade(tradeID, rejectCode, messageText);

        assertEquals(tradeID, rejectedTrade.getTradeID());
        assertEquals(rejectCode, rejectedTrade.getRejectCode());
        assertEquals(messageText, rejectedTrade.getMessageText());
    }

    @Test
    void testSettersAndGetters() {
        RejectedTrade rejectedTrade = new RejectedTrade();

        TradeIdentification tradeID = new TradeIdentification(); // Assume a default constructor
        String rejectCode = "RC123";
        String messageText = "Trade rejected";

        rejectedTrade.setTradeID(tradeID);
        rejectedTrade.setRejectCode(rejectCode);
        rejectedTrade.setMessageText(messageText);

        assertEquals(tradeID, rejectedTrade.getTradeID());
        assertEquals(rejectCode, rejectedTrade.getRejectCode());
        assertEquals(messageText, rejectedTrade.getMessageText());
    }

    @Test
    void testEquals() {
        TradeIdentification tradeID1 = new TradeIdentification(); // Assume a default constructor
        TradeIdentification tradeID2 = new TradeIdentification(); // Assume a default constructor
        String rejectCode = "RC123";

        RejectedTrade trade1 = new RejectedTrade(tradeID1, rejectCode, "Message");
        RejectedTrade trade2 = new RejectedTrade(tradeID1, rejectCode, "Message");
        RejectedTrade trade3 = new RejectedTrade(tradeID2, rejectCode, "Message");

        assertTrue(trade1.equals(trade2));
        assertFalse(trade1.equals(trade3));
        assertFalse(trade1.equals(new Object())); // Different type
        assertFalse(trade1.equals(null)); // Null
    }
}
